// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List screen test List screen snapshot test should render correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#FFFFFF",
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "flexDirection": "row",
        "height": 65,
        "marginBottom": 10,
        "paddingHorizontal": 20,
        "paddingTop": 15,
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "#F3F3F3",
          "flex": 1,
          "flexDirection": "row",
          "fontFamily": "SourceSansPro-Regular",
          "fontWeight": "normal",
          "marginTop": 10,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "justifyContent": "center",
            "width": 40,
          }
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="button-filter-screen-active"
        >
          <View
            accessibilityLabel="button-icon"
            accessibilityState={
              Object {
                "disabled": true,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={false}
            hitSlop={
              Object {
                "bottom": 15,
                "left": 15,
                "right": 15,
                "top": 15,
              }
            }
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID="button-icon"
          >
            <Text
              allowFontScaling={false}
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 16,
                  },
                  Object {
                    "color": "#808080",
                  },
                  Object {
                    "fontFamily": "ColectionIcon",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  Object {},
                ]
              }
            >
              
            </Text>
          </View>
        </View>
      </View>
      <TextInput
        onChangeText={[Function]}
        placeholder="Cari berdasarkan provinsi"
        style={
          Object {
            "flex": 1,
            "fontFamily": "SourceSansPro-Regular",
            "fontWeight": "normal",
          }
        }
        testID="text-input-search-by-order-id-active"
        value=""
      />
    </View>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
      testID="button-filter-screen-active"
    >
      <View>
        <View
          accessibilityLabel="button-icon"
          accessibilityState={
            Object {
              "disabled": true,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={false}
          hitSlop={
            Object {
              "bottom": 15,
              "left": 15,
              "right": 15,
              "top": 15,
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="button-icon"
        >
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "color": undefined,
                  "fontSize": 16,
                },
                Object {
                  "color": "#808080",
                  "marginTop": 10,
                  "padding": 12,
                },
                Object {
                  "fontFamily": "ColectionIcon",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                Object {},
              ]
            }
          >
            
          </Text>
        </View>
      </View>
    </View>
  </View>
  <RCTScrollView
    ListEmptyComponent={[Function]}
    contentContainerStyle={
      Object {
        "marginHorizontal": 20,
        "minHeight": "100%",
        "paddingBottom": 20,
      }
    }
    data={Array []}
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={0.1}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    testID="flat-list-item-order-active"
    viewabilityConfigCallbackPairs={Array []}
  >
    <RCTRefreshControl />
    <View>
      <View
        accessibilityLabel="view-empty-content"
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
          }
        }
        testID="view-empty-content"
      >
        <Image
          accessibilityLabel="view-empty-content"
          source="test-file-stub"
          style={
            Object {
              "height": 200,
              "marginBottom": 20,
              "width": 200,
            }
          }
          testID="view-empty-content"
        />
        <Text>
          Data tidak ditemukan
        </Text>
      </View>
    </View>
  </RCTScrollView>
  <View
    style={
      Object {
        "backgroundColor": "#FFFFFF",
        "borderColor": "#EFEFEF",
        "borderRadius": 5,
        "borderTopWidth": 1,
        "padding": 20,
      }
    }
  >
    <View
      accessibilityRole="button"
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
      testID="button-filter-order"
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Tambah Data
        </Text>
      </View>
    </View>
  </View>
  <View />
</View>
`;
